name: CI Build & Test

on:
  # 모든 코드 변경 시 빌드 및 테스트 실행
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: 'Release'
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', 'Directory.Build.props', 'Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration ${{ env.CONFIGURATION }}

    - name: Run Tests
      run: |
        echo "Running tests..."
        # 테스트 프로젝트가 있으면 실행
        if find . -name "*.Tests.csproj" -o -name "*.Test.csproj" | grep -q .; then
          dotnet test --no-build --configuration ${{ env.CONFIGURATION }} --verbosity normal \
            --logger "trx;LogFileName=test-results.trx" \
            --logger "console;verbosity=detailed" \
            --collect:"XPlat Code Coverage"
        else
          echo "No test projects found, skipping tests"
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          **/*.trx
          **/coverage.cobertura.xml
        retention-days: 7

    - name: Build Summary
      if: always()
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📊 Build Result" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration: ${{ env.CONFIGURATION }}" >> $GITHUB_STEP_SUMMARY
        echo "- .NET Version: ${{ env.DOTNET_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔧 Trigger Information" >> $GITHUB_STEP_SUMMARY
        echo "- Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Actor: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- SHA: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY