name: Release & Publish to NuGet

on:
  # Directory.Build.props 파일이 변경될 때만 실행 (버전 업데이트 시)
  push:
    branches: [ main ]
    paths:
      - 'Directory.Build.props'
      - '.github/workflows/release.yml'  # 워크플로우 자체가 변경될 때도 실행
  
  # PR에서는 모든 변경사항에 대해 빌드 및 테스트 실행
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  
  # 수동 실행 가능
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to NuGet'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: 'Release'
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', 'Directory.Build.props', 'Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration ${{ env.CONFIGURATION }}

    - name: Run Tests
      run: |
        echo "Running tests..."
        # 테스트 프로젝트가 있으면 실행
        if find . -name "*.Tests.csproj" -o -name "*.Test.csproj" | grep -q .; then
          dotnet test --no-build --configuration ${{ env.CONFIGURATION }} --verbosity normal
        else
          echo "No test projects found, skipping tests"
        fi

    - name: Extract version
      id: version
      run: |
        VERSION=$(grep '<Version>' Directory.Build.props | sed 's/.*<Version>\(.*\)<\/Version>.*/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Check if should publish
      id: check-publish
      run: |
        # PR인 경우 배포하지 않음 (빌드와 테스트만 실행)
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "should-publish=false" >> $GITHUB_OUTPUT
          echo "PR - Will not publish to NuGet (build and test only)"
        # main 브랜치에 Directory.Build.props가 변경되어 push된 경우
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
          echo "should-publish=true" >> $GITHUB_OUTPUT
          echo "Directory.Build.props changed on main - Will publish to NuGet"
        # 수동 실행으로 publish가 true인 경우
        elif [[ "${{ github.event.inputs.publish }}" == "true" ]]; then
          echo "should-publish=true" >> $GITHUB_OUTPUT
          echo "Manual publish - Will publish to NuGet"
        else
          echo "should-publish=false" >> $GITHUB_OUTPUT
          echo "Will not publish to NuGet"
        fi

    - name: Create NuGet packages
      run: |
        dotnet pack --configuration ${{ env.CONFIGURATION }} \
          --no-build \
          --output ./artifacts \
          /p:Version=${{ steps.version.outputs.version }}

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: artifacts/*.nupkg
        retention-days: 7

    - name: Upload symbol packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-symbols
        path: artifacts/*.snupkg
        retention-days: 7

    - name: Validate packages
      if: steps.check-publish.outputs.should-publish == 'true'
      run: |
        for package in ./artifacts/*.nupkg; do
          echo "Validating $package"
          dotnet nuget verify $package || true
        done

    - name: Check if version exists on NuGet
      if: steps.check-publish.outputs.should-publish == 'true'
      id: version-check
      run: |
        VERSION=${{ steps.version.outputs.version }}
        
        # 각 패키지 확인
        for package in ./artifacts/*.nupkg; do
          PACKAGE_NAME=$(basename $package .${VERSION}.nupkg)
          
          # NuGet.org에서 버전 확인
          if dotnet nuget list source https://api.nuget.org/v3/index.json --source https://api.nuget.org/v3/index.json | grep -q "$PACKAGE_NAME $VERSION"; then
            echo "Version $VERSION of $PACKAGE_NAME already exists on NuGet"
            echo "version-exists=true" >> $GITHUB_OUTPUT
            exit 1
          fi
        done
        
        echo "version-exists=false" >> $GITHUB_OUTPUT

    - name: Publish to NuGet
      if: success() && steps.check-publish.outputs.should-publish == 'true' && steps.version-check.outputs.version-exists != 'true'
      run: |
        for package in ./artifacts/*.nupkg; do
          echo "Publishing $package to NuGet.org"
          dotnet nuget push $package \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        done

    - name: Create GitHub Release
      if: success() && steps.check-publish.outputs.should-publish == 'true' && steps.version-check.outputs.version-exists != 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        generate_release_notes: true
        files: |
          ./artifacts/*.nupkg
          ./artifacts/*.snupkg
        body: |
          ## FluxIndex v${{ steps.version.outputs.version }}
          
          ### 📦 NuGet Package
          - [FluxIndex](https://www.nuget.org/packages/FluxIndex/${{ steps.version.outputs.version }}) - Main package with core RAG infrastructure
          
          ### 📋 Optional Extension Packages
          - FluxIndex.AI.* - AI provider integrations (coming soon)
          - FluxIndex.Storage.* - Storage provider integrations (coming soon)
          - FluxIndex.Extensions.* - Additional extensions (coming soon)
          
          ### 🔄 Changes
          See the full changelog below.

    - name: Summary
      if: always()
      run: |
        echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📊 Build Result" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📦 Version" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Should Publish: ${{ steps.check-publish.outputs.should-publish }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔧 Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- .NET Version: ${{ env.DOTNET_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration: ${{ env.CONFIGURATION }}" >> $GITHUB_STEP_SUMMARY
        echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY