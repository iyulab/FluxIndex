name: NuGet Publish

on:
  push:
    branches: [ main ]
    paths:
      # Only trigger when Directory.Build.props is changed (version update)
      - 'src/Directory.Build.props'
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish packages even without version change'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NUGET_XMLDOC_MODE: skip
  NUGET_OUTPUT: ./nupkgs

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.version_check.outputs.should_publish }}
      version: ${{ steps.extract_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Extract version from Directory.Build.props
      id: extract_version
      run: |
        VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" src/Directory.Build.props)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Check if Directory.Build.props changed
      id: version_check
      run: |
        if [[ "${{ github.event.inputs.force_publish }}" == "true" ]]; then
          echo "Force publish requested"
          echo "should_publish=true" >> $GITHUB_OUTPUT
        elif git diff HEAD^ HEAD --name-only | grep -q "src/Directory.Build.props"; then
          echo "Directory.Build.props has changed"
          echo "should_publish=true" >> $GITHUB_OUTPUT
        else
          echo "Directory.Build.props has not changed"
          echo "should_publish=false" >> $GITHUB_OUTPUT
        fi

  build-and-pack:
    needs: check-version
    if: needs.check-version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal

    - name: Pack NuGet packages
      run: |
        # Pack main FluxIndex package
        dotnet pack src/FluxIndex.SDK/FluxIndex.SDK.csproj \
          --configuration Release \
          --no-build \
          --output ${{ env.NUGET_OUTPUT }} \
          /p:PackageId=FluxIndex

        # Pack AI providers
        dotnet pack src/FluxIndex.AI.OpenAI/FluxIndex.AI.OpenAI.csproj \
          --configuration Release \
          --no-build \
          --output ${{ env.NUGET_OUTPUT }} || true

        # Pack Storage providers
        dotnet pack src/FluxIndex.Storage.PostgreSQL/FluxIndex.Storage.PostgreSQL.csproj \
          --configuration Release \
          --no-build \
          --output ${{ env.NUGET_OUTPUT }} || true

        dotnet pack src/FluxIndex.Storage.SQLite/FluxIndex.Storage.SQLite.csproj \
          --configuration Release \
          --no-build \
          --output ${{ env.NUGET_OUTPUT }} || true

        # Pack Cache providers
        dotnet pack src/FluxIndex.Cache.Redis/FluxIndex.Cache.Redis.csproj \
          --configuration Release \
          --no-build \
          --output ${{ env.NUGET_OUTPUT }} || true

        # Pack Extensions
        dotnet pack src/FluxIndex.Extensions.FileFlux/FluxIndex.Extensions.FileFlux.csproj \
          --configuration Release \
          --no-build \
          --output ${{ env.NUGET_OUTPUT }} || true

    - name: Upload NuGet packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.NUGET_OUTPUT }}/*.nupkg

    - name: Upload symbol packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: symbol-packages
        path: ${{ env.NUGET_OUTPUT }}/*.snupkg
        if-no-files-found: ignore

  publish-nuget:
    needs: [check-version, build-and-pack]
    if: needs.check-version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    environment: nuget-publish
    
    steps:
    - name: Download NuGet packages
      uses: actions/download-artifact@v5
      with:
        name: nuget-packages
        path: ./nupkgs

    - name: Download symbol packages
      uses: actions/download-artifact@v5
      with:
        name: symbol-packages
        path: ./nupkgs
      continue-on-error: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish to NuGet.org
      run: |
        for package in ./nupkgs/*.nupkg; do
          if [[ ! "$package" == *.symbols.nupkg ]]; then
            echo "Publishing $package to NuGet.org..."
            dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          fi
        done

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.check-version.outputs.version }}
        release_name: Release v${{ needs.check-version.outputs.version }}
        body: |
          ## FluxIndex v${{ needs.check-version.outputs.version }}
          
          ### Packages Published
          - FluxIndex (Main package)
          - FluxIndex.AI.OpenAI
          - FluxIndex.Storage.PostgreSQL
          - FluxIndex.Storage.SQLite
          - FluxIndex.Cache.Redis
          - FluxIndex.Extensions.FileFlux
          
          ### Installation
          ```bash
          dotnet add package FluxIndex --version ${{ needs.check-version.outputs.version }}
          ```
          
          ### Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
        draft: false
        prerelease: ${{ contains(needs.check-version.outputs.version, 'preview') || contains(needs.check-version.outputs.version, 'alpha') || contains(needs.check-version.outputs.version, 'beta') }}